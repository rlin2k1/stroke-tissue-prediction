# :: image_processing.py
#####################################################
# Functions to handle processing the raw DCM images.
#####################################################
# :: Created By: Benji Brandt <benjibrandt@ucla.edu>, 
#                Roy Lin <rlin2k1@gmail.com>, 
#                David Macaraeg <dmacaraeg@g.ucla.edu>
# :: Creation Date: 15 May 2019

import pydicom
import numpy as np
from random import sample
from collections import defaultdict
import pydicom
import sys, os

_INSTANCE_NUMBER = (0x0020, 0x0013)
_ACQUISITION_NUMBER = (0x0020, 0x0012)

def random_sample_pixel_map(pixel_map, number_of_samples):
    """
    Randomly samples the provided pixel map to obtain number_of_samples coordinates.

    :param dict pixel_map: a key-value storage of coordinates to pixel values.
    :param int number_of_samples: the number of samples we wish to obtain.
    :return: a dictionary comprised of number_of_samples randomly-selected key-value pairs from pixel_map.
    :rtype: dict
    """
    keys = sample(pixel_map.keys(), number_of_samples)
    return {k: v for (k, v) in pixel_map.items() if k in keys}

def parse_dcm_data(list_of_files):
    """
    Parses all DCMs within list of files, creating a mapping between patient_id, pixel coordinates, and pixel intensity over time.

    :param list list_of_files: a list of files to examine, likely generated with os.listdir.
    :return: a dictionary in the following form: {k: patient_id v: {k: pixel_coordinate v: array_of_pixel_values_over_time}}
    """
    patient_dict = defaultdict(dict)
    for file in os.listdir(list_of_files):
        if file.endswith(".dcm"):
            dcm = pydicom.dcmread(file)
            patient_dict[dcm.PatientID] = 0
            pixels = dcm.pixel_array
            d = ip.map_pixel_data(pixels)

def map_pixel_data(pixels, ignore_zero_intensity = True):
    """
    Creates a dictionary of pixel coordinates to pixel values.

    :param list pixels: a list of lists, where each sublist is a 2-d array of pixels generated by pydicom's pixel_array for a specific time slice.
    :param bool ignore_zero_intensity: if true, mappings won't be created for pixels which have 0 as their value.
    :return: a dictionary of image coordinates as the key, matched with pixel values as the value.
    :rtype: dict
    """
    sto = defaultdict(list)
    for x in range(len(pixels)):
        for y in range(len(pixels[x])):
            if ignore_zero_intensity and pixels[x][y] == 0: 
                continue
            sto[(x, y)].append(pixels[x][y])
    return sto

if __name__ == '__main__':
    if len(sys.argv) == 2:
        print("Processing DCMs in directory: {}".format(sys.argv[1]))
        parse_dcm_data(os.listdir(sys.argv[1]))
    else:
        sys.exit("USAGE: python3 main.py <directory with DCM files>")
